// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Phrasebook.Data;

namespace PhrasebookBackendService.Migrations
{
    [DbContext(typeof(PhrasebookDbContext))]
    partial class PhrasebookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Phrasebook.Data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirstLanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("ForeignLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstLanguageId");

                    b.HasIndex("ForeignLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Phrasebooks");
                });

            modelBuilder.Entity("Phrasebook.Data.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Phrasebook.Data.Models.Phrase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectnessCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstLanguagePhrase")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ForeignLanguagePhrase")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ForeignLanguageSynonyms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LexicalItemType")
                        .HasColumnType("int");

                    b.Property<int>("PhrasebookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhrasebookId");

                    b.ToTable("Phrases");
                });

            modelBuilder.Entity("Phrasebook.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("SignedUpOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Phrasebook.Data.Models.Book", b =>
                {
                    b.HasOne("Phrasebook.Data.Models.Language", "FirstLanguage")
                        .WithMany()
                        .HasForeignKey("FirstLanguageId");

                    b.HasOne("Phrasebook.Data.Models.Language", "ForeignLanguage")
                        .WithMany()
                        .HasForeignKey("ForeignLanguageId");

                    b.HasOne("Phrasebook.Data.Models.User", "User")
                        .WithMany("Phrasebooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstLanguage");

                    b.Navigation("ForeignLanguage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Phrasebook.Data.Models.Phrase", b =>
                {
                    b.HasOne("Phrasebook.Data.Models.Book", "Phrasebook")
                        .WithMany("Phrases")
                        .HasForeignKey("PhrasebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phrasebook");
                });

            modelBuilder.Entity("Phrasebook.Data.Models.Book", b =>
                {
                    b.Navigation("Phrases");
                });

            modelBuilder.Entity("Phrasebook.Data.Models.User", b =>
                {
                    b.Navigation("Phrasebooks");
                });
#pragma warning restore 612, 618
        }
    }
}
